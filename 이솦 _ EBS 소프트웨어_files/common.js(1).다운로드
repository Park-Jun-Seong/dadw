

var _noHmpgUrls = [ "error", "icons", "blck", "coding", "css", "js", "cmmn", "sample", "robots", "txt", "blk", "images", "editor", "font", "plugins", "static", "upload", "test", "mypage", "esof", "chbt", "oc" ];


$(document).ready(function(){
	
//	//DATE PICKER 공통 설정값
//	$.datepicker.setDefaults({
//	    dateFormat: 'yy.mm.dd',
//	    prevText: '이전 달',
//	    nextText: '다음 달',
//	    monthNames: ['1월', '2월', '3월', '4월', '5월', '6월', '7월', '8월', '9월', '10월', '11월', '12월'],
//	    monthNamesShort: ['1월', '2월', '3월', '4월', '5월', '6월', '7월', '8월', '9월', '10월', '11월', '12월'],
//	    dayNames: ['일', '월', '화', '수', '목', '금', '토'],
//	    dayNamesShort: ['일', '월', '화', '수', '목', '금', '토'],
//	    dayNamesMin: ['일', '월', '화', '수', '목', '금', '토'],
//	    showMonthAfterYear: true,
//	    yearSuffix: '년'
//	});
	
	
	fncFileValidCheck();
	
});


//파일선택
function fncSelectFile(fileId){
	$('#'+fileId).click();
}


function fncFileValidCheck(){
	$("input:file").change(function () {
		var fakePath = $(this).val();
		
		if( !fncIsEmpty( fakePath ) ){

			var fileName;
			
			//업로드 형식 체크.jpg,.png
			var accept = $(this).attr("accept");
			if( !fncIsEmpty( accept ) ){
				
				var fileValue = $(this).val().split("\\");
				fileName = fileValue[fileValue.length-1]; // 파일명

				accept = accept.trimAll();
				accept = accept.replace(/\./gi, "");
				var acceptArray = accept.split(",");
				
				var fileExt = fakePath.substring( fakePath.lastIndexOf('.') + 1 , fakePath.length ).toLowerCase();	//파일확장자
				if($.inArray(fileExt, acceptArray) == -1) {
					alert( '업로드 파일 형식이 맞지 않습니다.\n[ 업로드 가능 파일 형식 : ' + acceptArray + ' ]' );
					$(this).val("");
					$(this).siblings(".upload-name").val("");
					return;
				}
			}
			
			
			//파일 업로드 MAX SIZE(MB)
			var maxSize = $(this).attr("max-size");
			maxSize = parseInt( maxSize ) * 1024 * 1024;
			//현재 선택한 파일 SIZE
			var currentSize = $(this)[0].files[0].size;
			if( !fncIsEmpty( maxSize ) ){
				
				if( maxSize < currentSize ){
					alert( "용량이 초과했습니다.\n파일 용량은 " + bytesToSize(maxSize, "FLOOR") + " 까지 등록 가능합니다." );
					$(this).val("");
					$(this).siblings(".upload-name").val("");
					return;
				}
			}
			
			var callbackFnc = $(this).attr("callback-fnc");
			if( !fncIsEmpty( callbackFnc ) ){
				callbackFnc = window[callbackFnc];
				if( typeof callbackFnc == "function" ){
					var fileObj = { fileName : fileName, currentSize : currentSize, accept : accept };
					callbackFnc( this, fileObj );
				}
			}
		}
	}); 
	
}


//해당 레이어 화면 중앙으로 이동
jQuery.fn.center = function () {
    this.css("position","absolute");
    this.css("top", Math.max(0, (($(window).height() - $(this).outerHeight()) / 2) + $(window).scrollTop()) + "px");
    this.css("left", Math.max(0, (($(window).width() - $(this).outerWidth()) / 2) + $(window).scrollLeft()) + "px");
    return this;
}


/**
 * EBS SSO 우편번호 api
 * 
 * @returns
 */
function fncShowJibunPopup(){
	
	var returnUrl = document.location.origin + "/esof/cmmn/setJibun.do";
	var parseUrlObj = parseURL( returnUrl );
	var safeUrl = parseUrlObj.protocol + "//" + parseUrlObj.hostname + parseUrlObj.pathname;
	var ebsSsoJibunUrl = "https://sso.ebs.co.kr/idp/popup/roadnameAddr/jibun.jsp?zipType=new&returnUrl=" + safeUrl;
	
	window.open( ebsSsoJibunUrl, "ebsSsoJibunPopup", "width=500, height=610, menubar=no, status=no, toolbar=no" );
	
}


/**
 * URL Parsing
 * @param url
 * @returns
 */
function parseURL(url) {
    var parser = document.createElement('a'),
        searchObject = {},
        queries, split, i;
    // Let the browser do the work
    parser.href = url;
    // Convert query string to object
    queries = parser.search.replace(/^\?/, '').split('&');
    for( i = 0; i < queries.length; i++ ) {
        split = queries[i].split('=');
        searchObject[split[0]] = split[1];
    }
	var returnDta = {
		protocol: parser.protocol,
		host: parser.host,
		hostname: parser.hostname,
		port: parser.port,
		pathname: parser.pathname,
		search: parser.search,
		searchObject: searchObject,
		hash: parser.hash
    };
    
    // 브라우저가 IE면 pathname 앞에 "/" 붙임
 	var agent = navigator.userAgent.toLowerCase();

 	if ( (navigator.appName == 'Netscape' && navigator.userAgent.search('Trident') != -1) || (agent.indexOf("msie") != -1) ) {
 		returnDta.pathname = "/"+parser.pathname
 	}
 	
 	return returnDta;
// 	return {
// 		protocol: parser.protocol,
// 		host: parser.host,
// 		hostname: parser.hostname,
// 		port: parser.port,
// 		pathname: parser.pathname,
// 		search: parser.search,
// 		searchObject: searchObject,
// 		hash: parser.hash
// 	};
}



/**
 * 파일 다운로드
 * @param downloadUrl
 * @param downloadFileName
 * @returns
 */
function fncDownload( downloadUrl, downloadFileName, downloadTarget ){

	var link = document.createElement( 'a' );
	document.body.appendChild( link );
	link.id = "downloadLink";
	link.href = downloadUrl;
	if( !fncIsEmpty( downloadFileName ) ){
		link.download = downloadFileName;
	} else {
		link.download = "";
	}
	if( !fncIsEmpty( downloadTarget ) ){
		link.target = downloadTarget;
	}
	link.click();
	
	link.remove();
	
}



/**
 * 로그인 체크
 * 텍스트코딩에서 해당 함수 사용중. 함수 수정 및 삭제시 텍스트코딩과 협의 후 진행 필요!!!!!!
 * 
 * @returns
 */
function fncChkSession(){
	
	   var resultValue = false;
	   
	   $.ajax( {
	      async : false,
	      cache : false,
	      url : "/esof/cmmn/chkSession.do",
		  dataType : "json",
		  success : function( data, status ) {
			  
				var result = data.result;
				
				if( !fncIsEmpty( result ) ){
					
					if( result == "SESSION_AVAILABLE" ){
						resultValue = true;
					} else if( result == "SESSION_EXPIRED" ){
						resultValue = false;
					} else {
						resultValue = false;
					}
					
				}
			  
	      }
	   } );
	   
	   return resultValue;
	
}

/**
 * 해당 url로 화면 이동
 * 텍스트코딩에서 해당 함수 사용중. 함수 수정 및 삭제시 텍스트코딩과 협의 후 진행 필요!!!!!!
 * 
 * @param url
 * @returns
 */
function fncRedirect( url ){
	if( url ){
		location.href = url;
	}
}


/**
 * 로그인 체크 후 로그인 화면으로 Redirect
 * 텍스트코딩에서 해당 함수 사용중. 함수 수정 및 삭제시 텍스트코딩과 협의 후 진행 필요!!!!!!
 * 
 * @returns
 */
function fncChkSessionAndRedirect( alertMsg ){
	
	//로그인 상태
	if( fncChkSession() ){
		
	//로그아웃 상태
	} else {
		if( alertMsg ){
			alert( alertMsg );
			
		} else {
			alert( "로그인이 필요합니다." );
		}
		
		location.href = "/sso/loginView.do";
	}
	
}


/**
 * 닉네임 중복확인
 * 
 * @param ncnmNm
 * @returns
 */
function fncChkNcnmDupl( ncnmNm ){
	
	var isDupl;
	
	$.ajax( {
		async : false,
		cache : false,
		method: "POST",
		url : "/esof/cmmn/ncnmDuplCheck.do",
		dataType : "json",
		data : { ncnmNm : ncnmNm } ,
		success : function( data, status ) {
			
			var result = data.result;
			
			if( result == "SUCCESS" ){
				
				var ncnmCount = Number(data.ncnmCount);
				
				if( ncnmCount > 0 ){
					isDupl = true;
				} else {
					isDupl = false;
				}
				
			}
			
			
		}
	} );
	
	return isDupl;
	
}


/**
 * 사용자 검색 모달
 * 
 * @param makrSn
 * @returns
 */
//회원검색 모달창
function fncShowUserSearchModal(fnc){
	
	fncLoad( '#cmmnModalDiv', '/esof/cmmn/userSearchModalView.do', {}, function(){
		
		userSearchModalCallback = fnc; // RETURN DATE : { userSn, userId, userNm, modalPopupClose }
				
		modalPopupOpen('user');
//		var top = $('.user-popup').offset().top;
//		$('html, body').animate( { scrollTop : top }, 400 );
	});
}

/**
 * 홈페이지 정보 모달
 * 
 * @param makrSn
 * @returns
 */
function fncShowHmpgInfoModal( userSn ){  
	var data = { userSn : userSn };
	fncLoad( '#cmmnModalDiv', '/esof/cmmn/hmpgInfoModalView.do', data, function(){
		modalPopupOpen( "hmpglist" );
	});
}

/**
 * 친구정보 모달
 * 
 * @param makrSn
 * @returns
 */
function fncShowFriendInfoModal( makrSn, btnName, fnc ){  
	var data = { makrSn : makrSn };
	fncLoad( '#cmmnModalDiv', '/esof/cmmn/friendInfoModalView.do', data, function(){

		if(btnName){
			friendInfoModalCallback = fnc; // RETURN DATE : { userSn }
			
			$('#confirm-btn').text(btnName);
			$('#confirm-btn').show();
		}
		 
		modalPopupOpen( "administer" );
	});
	
}


function fncShowFriendListModal( makrSn ){
	var data = { makrSn : makrSn };   
	fncLoad( '#friendListDiv', '/esof/cmmn/friendListModalView.do', data, function(){
		modalPopupOpen( "friendlist1_work" );
	}); 
}

/**
 * 불량회원 체크
 * 
 * @returns
 */
function fncChkBadnUser(){
	
	var badnObj = {};
	var isBadn = false;
	
	$.ajax( {
		async : false,
		cache : false,
		url : "/esof/cmmn/chkBadnUser.do",
		dataType : "json",
		success : function( data, status ) {
			
			var result = data.result;
			
			if( result == "SUCCESS" ){
				var isBadnUser = data.isBadnUser;
				
				//불량회원
				if( isBadnUser == "Y" ){
					isBadn = true;
					
					var badnUserMap = data.badnUserMap;
					badnObj.badnUserMap = badnUserMap;
					
					badnObj.msg = "현재 회원님은 불량회원 상태입니다.";
					
				//불량회원이 아님
				} else {
					isBadn = false;
				}
				
			} else {
				isBadn = false;
				
			}
			
		}
	} );
	
	badnObj.isBadn = isBadn;
	
	return badnObj;
	
}

/**
 * 교사인증 체크
 * 
 * @returns
 */
function fncChkTcherCrtfc(){
	
	var resultValue = false;
	
	$.ajax( {
		async : false,
		cache : false,
		url : "/esof/cmmn/chkTcherCrtfc.do",
		dataType : "json",
		success : function( data, status ) {
			
			var result = data.result;
			
			if( !fncIsEmpty( result ) ){
				if( result == "SUCCESS" ){
					var isTcherCrtfc = data.isTcherCrtfc;
					
					if( isTcherCrtfc == "Y" ){
						// 교사인증 O
						resultValue = true;
					} else {
						// 교사인증 X
						resultValue = false;
					}
				} else {
					resultValue = false;
				}
				
			}
			
		}
	});
	
	return resultValue;
}


/**
 * 홈페이지 방문 로그 INSERT
 * 
 * @returns
 */
function fncHmpgVisitLogInsert( hmpgOperSn, hmpgId ){

	
//	var url = "/esof/cmmn/hmpgVisitInsert.do";
//	if( !fncIsEmpty( hmpgOperSn ) && !fncIsEmpty( hmpgId ) ){
//		url = "/" + hmpgId + "/esof/cmmn/hmpgVisitInsert.do";
//	}
//	
//	  $.ajax( {
//	      async : true,
//	      cache : false,
//	      type : "POST",
//	      url : url,
//		  dataType : "json",
//		  data : { hmpgOperSn : hmpgOperSn },
//		  success : function( data, status ) {}
//	   } );
	
}


/**
 * 컨텐츠 이용 INSERT
 * 
 * @param cntntsUseTyCode
 * @param lctreSn
 * @returns
 */
function fncCntntsUseInsert( cntntsUseTyCode, lctreSn ){
	
	   $.ajax( {
		      async : true,
		      cache : false,
		      type: 'POST',
		      url : "/esof/cmmn/cntntsUseInsert.do",
			  dataType : "json",
			  data : { cntntsUseTyCode : cntntsUseTyCode, lctreSn : lctreSn },
	 		  success : function( data, status ) {}
	   } );
		
}


/**
 * URL링크로 파일 다운로드
 * 
 * @returns
 */
function fncFileDownFromUrl( url ){
	
	encodeUrl = encodeURI(url);
	
	location.href = "/cmm/fms/FileDownFromUrl.do?fileUrl="+encodeUrl;
	
}


/**
 * 공통 모달창 열기
 * @param name         모달창 이름 (필수)
 * @param contextPath  contextPath (필수는 아니지만 되도록 사용)
 * @param obj          추가로 전송할 파라미터
 * @returns
 */
function fncShowCmmnModal( name, contextPath, obj ){

	//필수값
	if( !fncIsEmpty( name ) ){
		
		var param = new Object;
		param.modalType = name;

		//추가로 넘겨야될 파라미터 셋팅
		if( !fncIsEmpty( obj ) ){
			for( var key in obj ){
				param[key] = obj[key];
			}
		}
		
		fncLoad( "#cmmnModalDiv", contextPath + "/esof/cmmn/cmmnModalView.do", param, function(){
			modalPopupOpen( name );
			var top = $('.' + name + '-popup').offset().top;
			$('html, body').animate( { scrollTop : top }, 400 );
		} );
		
	}
	
}


//모달창 닫힘
function fncModalClose(){
	modalPopupClose();
	$("html").attr("style","overflow:auto");
	$("body").attr("style","overflow:auto");
}




/**
 * 문자 블라인드 처리
 */
function fncStrToBlind( type, str, blindCharacter ){
	
	var result = "";
	var character = "";
	
	//기본 치환 문자
	if( fncIsEmpty( blindCharacter ) ){
		character = "*";
	} else {
		character = blindCharacter;
	}
	
	//이름 블라인드 처리 (2글자인 경우 뒤에 1글자, 3글자 이상인경우 가운데 글자 블라인드)
	if( type == "name" ){
		
		let length = str.length;
		if( length == 2 ){
			
			for( let i=0; i < length; i++ ){
				if( i == 0 ){
					result += str.charAt( i );
				} else {
					result += blindCharacter;
				}
			}
			
		} else if( length >= 3 ){
			
			for( let i=0; i < length; i++ ){
				if( i == 0 || i == (length - 1) ){
					result += str.charAt( i );
				} else {
					result += blindCharacter;
				}
			}
			
		} else {
			result = str;
		}

		
	//아이디 블라인드 처리 ( 아이디 길이 절반 블라인드 )
	} else if( "id".equals( type ) ){
		
		let length = str.length;
		let halfLength = length / 2;
		for( let i=0; i < length; i++ ){
			if( i < halfLength ){
				result += str.charAt( i );
			} else {
				result += blindCharacter;
			}
		}
		
	}
	
	return result;
	
}



//타임코드 입력
function setTimeCodeStr( str ){
	
	var regex;
	
	//숫자가 아닌 문자열 제거
	str = str.replace( /[^0-9]/gi, "" );

	if( str.length < 4 ){
		
		str = lpad( str, 4, "0" );
				
	} else if( str.length == 5 ){

//		if( str.startsWith("0") ){
//			str = str.replace( "0", "" );
//		}
		if( str.indexOf("0") == 0 ){
			str = str.replace( "0", "" );
		}
		
	} else if( str.length > 6 ){
		
		str = str.slice( 0, -1 );
		
	}
	
	
	//타임코드 정규식
	regex = /^([1-9]|[1-9][1-9])?([0-5][0-9])([0-5][0-9])$/;
	
	str = str.replace( regex , function( match, p1, p2, p3, offset, string ){
		
		var resultStr = "";
		
		if( fncIsEmpty( p1 ) ){
			resultStr = [p2, p3].join(':');
		} else {
			resultStr = [p1, p2, p3].join(':');
		}
		
		return resultStr;
		
	} );
	
	return str;

}


//초 -> 시간
function secondsToTime(timeInSeconds) {
	
	var hours = Math.floor(timeInSeconds / 3600);
	var minutes = Math.floor( ( timeInSeconds - ( hours * 3600 ) ) / 60 );
	var seconds = Math.floor( timeInSeconds - ( hours * 3600 ) - ( minutes * 60 ) );

	hours = lpad( hours.toString(), 2, "0" );
	minutes = lpad( minutes.toString(), 2, "0" );
	seconds = lpad( seconds.toString(), 2, "0" );
	
	var resultTime = "";
	if( hours > 0 ){
		resultTime = [hours, minutes, seconds].join(":");
	} else {
		resultTime = [minutes, seconds].join(":");
	}
	
	return resultTime;
	
}

//시간 -> 초
function timeToSeconds( str ){
	
	var resultSeconds = 0;
	
	var strArray = str.split(":");
	
	if( !fncIsEmpty( strArray ) ){
		
		if( strArray.length == 2 ){
			
			var minute = parseInt( strArray[0] ) * 60;
			var second = parseInt( strArray[1] );
			
			resultSeconds = minute + second;
			
		} else if( strArray.length == 3 ){

			var hour = parseInt( strArray[0] ) * 60 * 60;
			var minute = parseInt( strArray[1] ) * 60;
			var second = parseInt( strArray[2] );
			
			resultSeconds = hour + minute + second;
			
		}
		
	}
	
	return resultSeconds;
	
}


//특정 글자수가 넘어가면 이후 글자는 ... 처리
function getOverText( str, len ){
	var result = str;
	if( str.length > len ){
		result = str.substring( 0, len );
		result += "...";
	}
	return result;
}


function isYoutubeUrl( url ){
	
	if( !fncIsEmpty( url ) ){
		
		var search1 = "youtu.be/";
		var search2 = "youtube.com";
		
		if( url.indexOf( search1 ) >= 0 ){
			return true;
		} else if( url.indexOf( search2 ) >= 0 ){
			return true;
		} else {
			return false;
		}
		
	} else {
		return false;
	}
	
}

function getIframeYoutubeUrl( url ){
	
	var result = "";
	var template = "https://www.youtube.com/embed/";
	
	if( !fncIsEmpty( url ) ){
		
		if( url.indexOf( "/embed/" ) > 0 ){
			result = url;
		} else {
			
			var id = "";
			var search1 = "youtu.be/";
			var search2 = "youtube.com/watch";
			
			if( url.indexOf( search1 ) >= 0 ){
				id = url.substring( url.indexOf( search1 ) + search1.length );
				
			} else if( url.indexOf( search2 ) >= 0 ){
				id = getParameterByName( url, "v" );
			}
			
			result = template + id;
			
		}
		
	}
	
	return result;
	
}



function getParameterByName( url, name ) {
    name = name.replace(/[\[\]]/g, '\\$&');
    var regex = new RegExp('[?&]' + name + '(=([^&#]*)|&|#|$)');
    var results = regex.exec(url);
    if (!results) return null;
    if (!results[2]) return '';
    return decodeURIComponent(results[2].replace(/\+/g, ' '));
}








/**
 * Layer Div01 열기
 * @param title
 * @param content
 * @param type       ('ALERT', 'CONFIRM')
 * @param confirmFnc
 * @param cancelFnc
 * @returns
 */
function fncShowLayerDiv01( title, content, type, confirmFnc, cancelFnc ){
	
	$( "#layerDiv01_Title" ).text( title );
	$( "#layerDiv01_Content" ).text( content );
	
	if( fncIsEmpty( confirmFnc ) ){
		confirmFnc = fncHideLayerDiv01;
	}
	$( "#layerDiv01_Confirm" ).on("click", function(){
		confirmFnc();
	});
	
	
	if( fncIsEmpty( cancelFnc ) ){
		cancelFnc = fncHideLayerDiv01;
	}
	$( "#layerDiv01_Cancel" ).on("click", function(){
		cancelFnc();
	});
	
	if( type == "ALERT" ){
		$( "#layerDiv01_Cancel" ).hide();
	} else if ( type == "CONFIRM" ){
		$( "#layerDiv01_Cancel" ).show();
	} else {
		$( "#layerDiv01_Cancel" ).hide();
	}
	
	$( "#layerDiv01" ).center();
	$( "#blackScreen" ).show();
	$( "#layerDiv01" ).show();
	$( "#layerDiv01_Confirm" ).focus();
	
}

/**
 * Layer Div01 닫기
 * @returns
 */
function fncHideLayerDiv01(){
	$( "#blackScreen" ).hide();
	$( "#layerDiv01" ).hide();
}




/**
넘어온 값이 빈값인지 체크합니다. 
!value 하면 생기는 논리적 오류를 제거하기 위해 명시적으로 value == 사용 
[], {} 도 빈값으로 처리
*/
function fncIsEmpty( value ) { 
	if( value == "" || value == null || value == undefined || ( value != null && typeof value == "object" && !Object.keys(value).length ) ){ 
		return true;
	} else { 
		return false;
	}
}

/**
 * get방식의 파라미터에서 key값에 해당하는 파라미터의 value 변경
 * 기존 파라미터에 key값에 해당하는 파라미터가 없으면 파라미터 추가
 * @param key
 * @param value
 * @returns {String}
 */
function getUpdateParam( key, value, urlQueryString ) {
	
    var newParam = key + '=' + value;
    var params = '?' + newParam;
    
    if( fncIsEmpty( urlQueryString ) ){
    	urlQueryString = document.location.search;
    }

    // If the "search" string exists, then build params from it
    if ( urlQueryString ) {
        keyRegex = new RegExp( '([\?&])' + key + '[^&]*' );

        // If param exists already, update it
        if ( urlQueryString.match(keyRegex) !== null ) {
            params = urlQueryString.replace( keyRegex, "$1" + newParam );
        } else { // Otherwise, add it to end of query string
            params = urlQueryString + '&' + newParam;
        }
    }
    
    return params;
}



/**
 * Null 체크
 */
 function isNull(obj) 
 {
    if( obj == "undefined" || obj == null || obj.value == "" || obj.val() == "" )
    {
        return true;
    } else {
    	return false;
    }
 }

/**
 * 숫자 입력 체크
 */
function numberCheck(){	
	var obj = event.srcElement;
	var returnValue = isNumber(obj);
	if(!returnValue){
		alert("숫자만 입력 가능합니다.");
		obj.value = "";
		obj.focus();	
	}
}

/**
 * 숫자 입력 체크, 메시지 출력
 */
function isNumberCheck(control, msg) {
	
	var val = control;
	var Num = "1234567890";
	for (var i=0; i<val.length; i++) {
		if(Num.indexOf(val.substring(i,i+1))<0) {
			alert(msg+' 형식이 잘못되었습니다.');
			return false;
		}
	}
	return true;
}

/**
 * 날짜 입력 체크
 */
function dateCheck(){	
	var returnValue = false;
	var obj = event.srcElement;
	var val = event.srcElement.value;
	
	if(val == ""){
		return;
	}

	var pt = /^\d{4}-\d{2}-\d{2}$/; 
    if (pt.test(val)) returnValue = true;
   
    if(returnValue){
	    var y = parseInt(val.substr(0,4), 10); 
	    var m = parseInt(val.substr(5,2), 10) - 1; 
	    var d = parseInt(val.substr(8,2), 10); 
	    var dt = new Date(y, m, d);  
	    if (dt.getFullYear() == y && dt.getMonth() == m && dt.getDate() == d) { 
	    	returnValue = true; 
	    } else { 
	    	returnValue = false;
	    }
    }

    if(!returnValue){
    	alert("날짜 형식에 맞게 입력해주세요.");
		obj.value = "";
		obj.focus();	
    }
}

/**
 * 빈값 입력
 */
function emptyValue(obj) {
	obj.value = "";
}

/**
 * 공백 입력 체크
 * jQuery와 호환이 되도록 수정( isEmptyValue($("#testId")) )
 * @param input 객체
 * @return 비어 있으면 true 갑이 있으면 false
 */
function isEmptyValue(obj) {
	
	var returnValue = false;
	var strValue = obj.value;
	
	if (typeof(strValue) == "undefined") {
		strValue = obj.val();
	}
	
	if (strValue.replace(/^\s*|\s*$/g, "") == "") {
		returnValue = true;
	}
	
	return returnValue;
	
}

/**
 * 공백 입력 체크 값을 통채로 넘길때 (jQuery 사용시 : ex) if( isEmptyValueId( $("#dupIdeaSeq").val() )) { )
 */
function isEmptyValueId(obj) {
	
	var returnValue = false;
	
	if (obj.replace(/^\s*|\s*$/g, "") == "") {
		returnValue = true;
	}
	
	return returnValue;
	
}


/**
 * 공백 입력 체크
 */
function isEmptyCheck( obj, objName) {
	
	var returnValue = isEmptyValue(obj);
	if( returnValue ){
		alert( objName + "은(는) 필수 입력값입니다.");
		obj.focus();	
	}
	return returnValue;
	
}

/**
 * 정규식 체크
 */
function isRegexCheck(obj, regex) {
	
	var returnValue = false;
	returnValue = regex.test(obj.value);
	return returnValue;
	
}

/**
 * 정규식 체크
 */
function isRegexCheck2(value, regex) {
	
	var returnValue = false;
	returnValue = regex.test(value);
	return returnValue;
	
}

/**
 * 정규식 체크
 */
function isValidCheck( obj, regexName, msg) {

	var regex = "";
	var eMsg = "";
	
	if( regexName == "ID" ) {
		regex = /^[a-zA-Z0-9]{3,10}$/;
		eMsg = "아이디는 영문, 숫자 3~10 자리입니다.";
	} else if( regexName == "PWD" ) {		
		regex = /^[a-zA-Z0-9]{6,8}$/;
		eMsg = "비밀번호는 영문, 숫자 6~8 자리입니다.";
	} else if( regexName == "EMAIL" )	{
		regex = /^[0-9a-zA-Z]([-_\.]?[0-9a-zA-Z])*@[0-9a-zA-Z]([-_\.]?[0-9a-zA-Z])*\.[a-zA-Z]{2,3}$/i;
		eMsg = "이메일 형식이 올바르지 않습니다.";

	} else if( regexName == "EMAIL1" )	{
		regex = /^[0-9a-zA-Z]([-_\.]?[0-9a-zA-Z])*$/;
		eMsg = "이메일 형식이 올바르지 않습니다.";
	} else if( regexName == "EMAIL2" )	 {
		regex = /^[0-9a-zA-Z]([-_\.]?[0-9a-zA-Z])*\.[a-zA-Z]{2,3}$/i;
		eMsg = "이메일 형식이 올바르지 않습니다.";

	} else {
		regex = regexName; 
		eMsg = msg;
	}
	

	var returnValue = isRegexCheck(obj, regex);
	if( returnValue == false){
		alert( eMsg );
		obj.focus();	
	}
	return returnValue;
	
}

/**
 * 체크박스, 라디오박스 선택갯수 체크
 */
function countChecked(obj) {
	
	var returnValue = 0;
	
	var checkedNum = 0;
	
	if(obj.length){
		for (var i = 0; i < obj.length; i++) {
			if (obj[i].checked == true) {
				checkedNum++;
			}
		}
	}else{
		if (obj.checked == true) {
			checkedNum++;
		}
	}
	
	returnValue = checkedNum;
	
	return returnValue;
	
}

/**
 * 엔터키 입력 체크
 */
function isEnterKey(obj) {
	
	var returnValue = false;
	
	if (obj.keyCode == 13) {
		returnValue = true;
	}
	
	return returnValue;
	
}

/**
 * 날짜 입력 범위 체크
 */
function checkDate(startDate, endDate) {
	
	var returnValue = false;
	
	replaceStartDate = startDate.replace(/[.]/g, "").replace(/[-]/g, "").replace(/[\/]/g, "");
	replaceEndDateDate = endDate.replace(/[.]/g, "").replace(/[-]/g, "").replace(/[\/]/g, "");
	
	if (parseInt(replaceStartDate) > parseInt(replaceEndDateDate)) {
		returnValue = true;
	}
	
	return returnValue;
	
}


/**
 * 이메일 주소 체크
 */
function checkEmail(email) {
	var returnValue = false;
    var reg = /^((\w|[\-\.])+)@((\w|[\-\.][^(\.)\1])+)\.([A-Za-z]+)$/;
	if (reg.test(email)) {
		returnValue = true;
	}
	return returnValue;
}


/**
 * 금액 표기 (천단위 콤마)
 */
function fncAddComma(n) {

	try {

		n = Number(n);

		if(isNaN(n)) {
			return 0;
		}
		var reg = /(^[+-]?\d+)(\d{3})/;
		n += '';
		while (reg.test(n)) {
			n = n.replace(reg, '$1' + ',' + '$2');
		}
		return n;
	} catch (e) {
		return 0;
	}
};



/**
 * 입력 가능 바이트수 체크
 */
function maxByteCheck( obj, maxByte, objName ) {

	if( getByteLength( obj.value ) >  maxByte ) {
		alert( "입력가능 글자수를 초과하였습니다 \n\n" + objName + "은(는) \n공백포함 한글은 " + Math.floor(maxByte/3) + "자, 영문은 " + maxByte + "자 까지 입력가능합니다"  );
		obj.focus();
		return true;
	}
	return false;
}

/**
 * 입력 가능 바이트수 체크(focus 안줌)
 */
function maxByteCheckNf( obj, maxByte, objName ) {

	if( getByteLength( obj.value ) >  maxByte ) {
		alert( "입력가능 글자수를 초과하였습니다 \n\n" + objName + "은(는) \n공백포함 한글은 " + Math.floor(maxByte/3) + "자, 영문은 " + maxByte + "자 까지 입력가능합니다"  );
		return true;
	}
	return false;
}
	
/**
 * 최대 바이트이하 내용작성
 */
var oldStringValue = "";

function truncateMaxByte(obj, maxByte) {
	
	if (getByteLength(obj) > maxByte) {
		alert("입력범위를 초과하였습니다!");
		obj.value = oldStringValue;
		//return;	
	} else {
		oldStringValue = obj.value;
	}
	
}


/**
 *  paramsStr에 있는 변수 값들을 POST 방식으로 특정 URL로 전송하고 싶을 때.
 * 	paramStr형식 : 변수이름=변수값|변수이름=변수값|변수이름=변수값
 */
function sendRedirectPOST( action, paramsStr )
{
	var f = document.createElement("form");

	f.method = "post";
	f.action = action;
	var paramArr = paramsStr.split("|");
	for ( var i = 0; i < paramArr.length; i++ ) {
		var paramName = paramArr[i].split("=")[0];
		var paramVal = paramArr[i].split("=")[1];
		var inputHidden = document.createElement("input");
		inputHidden.type = "hidden";
		inputHidden.name = paramName;
		inputHidden.value = paramVal;
		f.appendChild(inputHidden);
	}
	document.body.appendChild(f);
	f.submit();
}

/*==================================================
Function      : postPopupSubmit
Parameter     : action    : url
                paramsStr : 변수이름=변수값|변수이름=변수값|변수이름=변수값
                p_winName : popup창 명
Description   : popup창을 띄우고 그 팝업에 paramsStr에 있는 변수 값들을 POST 방식으로 특정 URL로 전송.
==================================================*/
function postPopupSubmit( action, paramsStr, p_winName, p_width, p_height, p_menubar, p_status, p_scrollbars, p_resizable )
{
	 
	 // 팝업창 띄우기
	 var left = (screen.width - p_width) / 2;
	 var top  = (screen.height - p_height) / 2;
	
	 var opt = "";
	     opt += "toolbar=0,";
	     opt += "location=0,";
	     opt += "directories=0,";
	     opt += "status="     + p_status + ",";
	     opt += "menubar="    + p_menubar + ",";
	     opt += "scrollbars=" + p_scrollbars + ",";
	     opt += "resizable="  + p_resizable + ",";
	     opt += "top="        + top + ",";
	     opt += "left="       + left + ",";
	     opt += "width="      + p_width + ",";
	     opt += "height="     + p_height;
	
	 window.open("", p_winName, opt);
 
	 // form 생성해서 팝업창에 target
	 var f = document.createElement("form");

	 f.target = p_winName;
	 f.method = "post";
	 f.action = action;
	 var paramArr = paramsStr.split("|");
	 for ( var i = 0; i < paramArr.length; i++ ) {
		var paramName = paramArr[i].split("=")[0];
		var paramVal = paramArr[i].split("=")[1];
		var inputHidden = document.createElement("input");
		inputHidden.type = "hidden";
		inputHidden.name = paramName;
		inputHidden.value = paramVal;
		f.appendChild(inputHidden);
	 }
	 document.body.appendChild(f);

	 f.submit();
}


/**
 * URI 인코딩
 */
function encodingURI(uri, charset) {
	var returnValue = "";
	returnValue = encodeURI(uri, charset);
	return returnValue;
}

/**
 * Object의 문자열 byte 길이를 리턴.
 */
 function getObjectByteLength(object) 
 {
    if( object == null || object.value == null )
        return 0;
    
 	return getByteLength(object.value);
 } 

/**
 * 문자열의 byte 길이를 3byte 리턴.
 */
 function getByteLength(str) 
 {
    var len = 0;
    for( var i = 0 ; i < str.length ; i++ ) 
    {
        var c = escape(str.charAt(i));
        if ( c.length == 1 )
            len ++;
        else if( c.indexOf("%u") != -1 )
            len += 3;
        else if( c.indexOf("%") != -1 )
            len += c.length/3;
    }
    return len;
 }
 
 /**
  * 문자열의 byte 길이를 2byte 리턴.
  */
  function getByteLength_2(str) 
  {
     var len = 0;
     for( var i = 0 ; i < str.length ; i++ ) 
     {
         var c = escape(str.charAt(i));
         if ( c.length == 1 )
             len ++;
         else if( c.indexOf("%u") != -1 )
             len += 2;
         else if( c.indexOf("%") != -1 )
             len += c.length/2;
     }
     return len;
  } 

/**
 * 숫자인지 아닌지 체크
 * jQuery와 호환이 되도록 수정( isNumber($("#testId")) )
 */
function isNumber(obj)
{
	var strValue = obj.value;

	if (typeof(strValue) == "undefined") {
		strValue = obj.val();
	}

	for(var i = 0; i < strValue.length; i++)
	{    
        var ch = strValue.charCodeAt(i);
        
		if((ch>33 && ch <45) ||(ch >46 && ch < 48) || ch > 57)
		{
			return false;
		}

		if(strValue.charCodeAt(0) == 32)
		{
			return false;
		}
    }    
    return true;
}

//한글방지 영문 숫자 체크 함수
function IsAllChar(checkStr) {
	var checkOK = "ABCDEFGHIJKLMNOPQRSTUVWXYZ1abcdefghijklmnopqrstuvwxyz0123456789";
	for (var i = 0;  i < checkStr.length;  i++) {
	ch = checkStr.charAt(i);
	for (var j = 0;  j < checkOK.length;  j++)
	if (ch == checkOK.charAt(j))
	break;
	if (j == checkOK.length) {
	return (false);
	break;
	}
	}
	return (true);
}


function fncIsNum( value ){
	var regType1 = /^[0-9]+$/;
	if (!regType1.test( value )) {
		return false;
	}
	return true;
}

function fncIsEnNum( value ){
	var regType1 = /^[A-Za-z0-9]+$/;
	if (!regType1.test( value )) {
		return false;
	}
	return true;
}


//특수문자방지 체크 함수
function HasSpecialChar(checkStr) {
	var checkOK = "~!@#$%^&*()_+|}{\":?><=-\\][';/.,0123456789";
	for (var i = 0;  i < checkStr.length;  i++) {
	ch = checkStr.charAt(i);
	for (var j = 0;  j < checkOK.length;  j++)
	if (ch == checkOK.charAt(j))
	return (true);
	}
	return (false);
}

/*==================================================
Function      : lpad 함수
Parameter     : str 대상문자열, len 길이, addStr 대체문자
Return		  : 문자열
Description   : lpad 처리 함수
==================================================*/
function lpad(str, len, addStr) {
	var result = str;
	var templen = len - result.length;
	for (var i = 0; i < templen; i++) {
		result = addStr + result;
	}
	return result;
}

/*==================================================
Function      : 오늘 날짜 구하기
Parameter     : 
Return		  : 문자열(YYYYMMDD)
Description   : 날짜 FORMAT 변환 함수
==================================================*/
function getToDay()
{
	var date = new Date();
	 
	var year = date.getFullYear();
	var month = date.getMonth()+1;
	var day = date.getDate();
	//var dayLabel = date.getDay()
	if(month < 10){
		month = "0"+month;
	}
	
	if(day < 10){
		day = "0"+day;
	}
	val = year + '-' + month + '-' + day;
	
	return val; 
}

//****************************************************************************
//날짜 관련 함수
//****************************************************************************
/*
 * 상상뱅크에서 날짜 포맷이 yyyy-MM-dd 형태인 것 전용으로 처리
 * @param int addVal (0:당월, -1:1개월전, -3:3개월전)
 * @param String startDateId 시작일 텍스트 박스의 엘리먼트 아이디
 * @param String endDateId 종료일 텍스트 박스의 엘리먼트 아이디
 */
function setDate(addVal, startDateId, endDateId) {
	var objStartDate = document.getElementById(startDateId);
	var objEndDate = document.getElementById(endDateId);
	var today = new Date();	
	var tMonth = today.getMonth()+1;
	var tDay = today.getDate();
	
	tDay = tDay < 10 ? "0" + tDay : tDay;
	tMonth = tMonth>9 ? ''+tMonth : '0'+tMonth;
	
	if (objEndDate.value == null || objEndDate.value.length != 10) {
		return;
	}
	if (addVal == 0) { 
		objStartDate.value = today.getFullYear()+"-"+tMonth+"-"+"01";
		objEndDate.value = today.getFullYear()+"-"+tMonth+"-"+tDay;
	} 
	else if(addVal == -1){
		
		objStartDate.value = addDate("sd", addVal, objEndDate.value, "-");
		objEndDate.value = addDate("ed", addVal, objEndDate.value, "-");
	}
	else {
		objStartDate.value = addDate("m", addVal, objEndDate.value, "-");
		objEndDate.value = today.getFullYear()+"-"+tMonth+"-"+tDay; 
	}
}

/*==================================================
Function      : 날짜 FORMAT을 YYYY-MM-DD 형태로 변환
Parameter     : val 대상문자열(YYYYMMDD)
Return		  : 문자열
Description   : 날짜 FORMAT 변환 함수
==================================================*/
function changeFormat(val)
{
	var YYYY = val.substr(0,4);
    var MM   = val.substr(4,2);
    var DD   = val.substr(6,2);
    var changeVal = YYYY+"-"+MM+"-"+DD;
    
    return changeVal; 
}

/* ----------------------------------------------------------------------------
 * 특정 날짜에 대해 지정한 값만큼 가감(+-)한 날짜를 반환
 *
 * 입력 파라미터 -----
 * pInterval : "yyyy" 는 연도 가감, "m" 은 월 가감, "d" 는 일 가감
 * pAddVal  : 가감 하고자 하는 값 (정수형)
 * pYyyymmdd : 가감의 기준이 되는 날짜
 * pDelimiter : pYyyymmdd 값에 사용된 구분자를 설정 (없으면 "" 입력)
 * 
 * 반환값 ----
 * yyyymmdd 또는 함수 입력시 지정된 구분자를 가지는 yyyy?mm?dd 값
 *
 * 사용예 ---
 * 2008-01-01 에 3 일 더하기 ==> addDate("d", 3, "2008-08-01", "-");
 * 20080301 에 8 개월 더하기 ==> addDate("m", 8, "20080301", "");
 ---------------------------------------------------------------------------  */
function addDate(pInterval, pAddVal, pYyyymmdd, pDelimiter)
{
 var yyyy;
 var mm;
 var dd;
 var cDate;
 //var oDate;
 var cYear, cMonth, cDay;
 
 if (pDelimiter != "") {
//  pYyyymmdd = pYyyymmdd.replace(eval("/\\" + pDelimiter + "/g"), "");
  var regExp = new RegExp( "\\" + pDelimiter + "", "gi" );
  pYyyymmdd = pYyyymmdd.replace(regExp, "");
  console.log("pYyyymmdd", pYyyymmdd);
 }

 yyyy = pYyyymmdd.substr(0, 4);
 mm  = pYyyymmdd.substr(4, 2);
 dd  = pYyyymmdd.substr(6, 2);
 
 if (pInterval == "yyyy") {
  yyyy = (yyyy * 1) + (pAddVal * 1); 
 } else if (pInterval == "m") {
  mm  = (mm * 1) + (pAddVal * 1);
 } else if (pInterval == "d") {
  dd  = (dd * 1) + (pAddVal * 1);
 } else if (pInterval == "sd") {
	  mm  = (mm * 1) + (pAddVal * 1);
	  dd  = "01";
 } else if (pInterval == "ed") {
	  mm  = (mm * 1) + (pAddVal * 1);	  
	  dd = new Date(new Date(yyyy, mm, 1)-86400000).getDate();
 }
 
 cDate = new Date(yyyy, mm - 1, dd); // 12월, 31일을 초과하는 입력값에 대해 자동으로 계산된 날짜가 만들어짐.
 cYear = cDate.getFullYear();
 cMonth = cDate.getMonth() + 1;
 cDay = cDate.getDate();
 
 cMonth = lpad(cMonth.toString(), 2, '0');
 cDay = lpad(cDay.toString(), 2, '0');

 if (pDelimiter != "") {
  return cYear + pDelimiter + cMonth + pDelimiter + cDay;
 } else {
  return cYear + cMonth + cDay;
 }
 
}

/*************************************************
 * 두 날짜의 차이를 일자로 구한다.(조회 종료일 - 조회 시작일)
 *
 * @param val1 - 조회 시작일(날짜 ex.2012-01-01)
 * @param val2 - 조회 종료일(날짜 ex.2012-01-01)
 * @return 기간에 해당하는 일자
 *************************************************/
function calDateRange(val1, val2)
{
    var FORMAT = "-"; 
   
    // 년도, 월, 일로 분리
    var start_dt = val1.split(FORMAT);
    var end_dt   = val2.split(FORMAT); 
     
    // 월 - 1(자바스크립트는 월이 0부터 시작하기 때문에...)
    // Number()를 이용하여 08, 09월을 10진수로 인식하게 함.
    start_dt[1]  = (Number(start_dt[1]) - 1) + "";
    end_dt[1]    = (Number(end_dt[1]) - 1) + ""; 
     
    var from_dt = new Date(start_dt[0], start_dt[1], start_dt[2]);
    var to_dt   = new Date(end_dt[0],  	end_dt[1],   end_dt[2]);

    return (to_dt.getTime() - from_dt.getTime()) / 1000 / 60 / 60 / 24; 

}

function setFullDate(minDate, startDateId, endDateId) {
	var objStartDate = document.getElementById(startDateId);
	var objEndDate = document.getElementById(endDateId);
	
	var today = new Date();	
	var tMonth = today.getMonth()+1;
	var tDay = today.getDate();
	
	tDay = tDay < 10 ? "0" + tDay : tDay;
	tMonth =tMonth>9 ? ''+tMonth : '0'+tMonth;
		
	if (objEndDate.value == null || objEndDate.value.length != 10) {
		return;
	}
	objStartDate.value = minDate;
	objEndDate.value = today.getFullYear()+"-"+tMonth+"-"+tDay;
}

/*-------------------------------------------------------------------------
 Notes     : 팝업을 중앙에 띄우는 함수.
 Parameter : p_url, p_winName, p_width, p_height, p_menubar, p_status, p_scrollbars, p_resizable
 Return    : window
-------------------------------------------------------------------------*/
function openPopupWindow(p_url, p_winName, p_width, p_height, p_menubar, p_status, p_scrollbars, p_resizable){

 var left = (screen.width - p_width) / 2;
 var top  = (screen.height - p_height) / 2;

 var opt = "";
     opt += "toolbar=0,";
     opt += "location=0,";
     opt += "directories=0,";
     opt += "status="     + p_status + ",";
     opt += "menubar="    + p_menubar + ",";
     opt += "scrollbars=" + p_scrollbars + ",";
     opt += "resizable="  + p_resizable + ",";
     opt += "top="        + top + ",";
     opt += "left="       + left + ",";
     opt += "width="      + p_width + ",";
     opt += "height="     + p_height;

 var popup = window.open(p_url, p_winName, opt);

 return popup;
}

/*-------------------------------------------------------------------------
Notes     : 팝업수에 따라서 왼쪽 위에 띄우는 함수.
Parameter : p_url, p_winName, p_width, p_height, p_menubar, p_status, p_scrollbars, p_resizable
Return    : window
-------------------------------------------------------------------------*/
function openPopupWindow2(p_url, p_winName, p_width, p_height, p_menubar, p_status, p_scrollbars, p_resizable, p_left){

var left = p_left;
var top  = 0; //(screen.height - p_height) / 2;


var opt = "";
    opt += "toolbar=0,";
    opt += "location=0,";
    opt += "directories=0,";
    opt += "status="     + p_status + ",";
    opt += "menubar="    + p_menubar + ",";
    opt += "scrollbars=" + p_scrollbars + ",";
    opt += "resizable="  + p_resizable + ",";
    opt += "top="        + top + ",";
    opt += "left="       + left + ",";
    opt += "width="      + p_width + ",";
    opt += "height="     + p_height;

var popup = window.open(p_url, p_winName, opt);

return popup;
}
/**
 * 날짜 형식 yyyy-MM-dd 로 바꾸기
 * 날짜입력시 '-'넣기와 숫자를 제외한 문자 빼기 함수(yyyy-MM-dd)
 */
function deleteSpecialChar( obj ){
	
    with( obj ){                              // 입력된값중 포함된 문자있으면 backspace
        var a = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz~`!@#$%^&*()_+|}{\":?><=-\\][';/.,"; 
        for(var i = 0; i < a.length; i++){ 
            if( obj.value.substr( obj.value.length - 1 , obj.value.length ) == a.charAt(i) ){ 
                obj.value = obj.value.substr( 0, obj.value.length - 1 ); 
            } 
        }
    }
	var change,cnt;                                                                                      
	change = obj.value;															  
	cnt = change.length;
	var returnValue = false;
	
	if(cnt == 4 ){                             //자릿수에 맞추어 '-' 넣기                                        
	 obj.value = obj.value + "-";                                                
	}                                                                            
	if(cnt == 7 ){                             //자릿수에 맞추어 '-' 넣기                                                 
	 obj.value = obj.value + "-";                                                 
	}
	if(cnt == 10){
		//년도 앞 2자리가 19 또는 20으로 시작하도록 되어 있던 것을 4자리로 사용할 수 있도록 변경
		var reg = /^(\d){4}(\/|-|_)(0[1-9]|1[0-2])(\/|-|_)(0[1-9]|[1-2][0-9]|3[0-1])$/;
		if(reg.test(obj.value)){
			returnValue = true;
		}else{
			alert("날짜가 올바르지 않습니다.");
			obj.value = "";
		}
		
		var startDate = document.getElementById("startDate").value;
		var endDate = document.getElementById("endDate").value;
		var SDATE = startDate.length;
		var EDATE = endDate.length;
		
		replaceStartDate = startDate.replace(/[.]/g, "").replace(/[-]/g, "").replace(/[\/]/g, "");
		replaceEndDateDate = endDate.replace(/[.]/g, "").replace(/[-]/g, "").replace(/[\/]/g, "");
		
		  if( SDATE == 10 && EDATE == 10){

				if (parseInt(replaceStartDate) < parseInt(replaceEndDateDate)) {
					returnValue = true;
		
				}else{
					
					alert("검색기간이 올바르지 않습니다.");
					obj.value = "";
					document.getElementById("startDate").focus();
					
				}
			  }
		  
		  return returnValue;
	}
	

	if( event.keyCode==8 && cnt == 9  ){       // 일자를 지우고 '-'넣어줌
       obj.value = obj.value.substr( 0, obj.value.length - 2 )+"-"; 
    }else if( event.keyCode==8 && cnt == 7  ){ // 월을지움
	   obj.value = obj.value.substr( 0, obj.value.length - 3 );
	}else if( event.keyCode==8 ){              // 년도지움                             
       obj.value = "";
	}

}

/*==================================================
Function      : openWindow
Parameter     : sUrl       (URL)
                oWindow    (Modal Name)
                iWidth     (가로 크기 : 숫자)
                iHeight    (세로 크기 : 숫자)
                iLeft      (가로 위치 : 숫자)
                iTop       (세로 위치 : 숫자)
Description   : Window 창 Open 함수
==================================================*/
function openWindow(sUrl, oWindow, iWidth, iHeight) {
	
//	var iLeft = (screen.width - iWidth) / 2;
//	var iTop = (screen.height - iHeight) / 2;
	
    var dualScreenLeft = typeof window.screenLeft !== "undefined" ? window.screenLeft : screen.left;
    var dualScreenTop = typeof window.screenTop !== "undefined" ? window.screenTop : screen.top;

    var screenWidth = window.innerWidth ? window.innerWidth : document.documentElement.clientWidth ? document.documentElement.clientWidth : screen.width;
    var screenHeight = window.innerHeight ? window.innerHeight : document.documentElement.clientHeight ? document.documentElement.clientHeight : screen.height;

    var iLeft = ((screenWidth / 2) - (iWidth / 2)) + dualScreenLeft;
    var iTop = ((screenHeight / 2) - (iHeight / 2)) + dualScreenTop;
	
	
	var sStyle     = "";
 
	sStyle = "width="       + iWidth     + "px," +
	         "height="      + iHeight    + "px," +
	         "left="        + iLeft + "px," +
	         "top="         + iTop  + "px," +
	         "scroll=yes,"  +
	         "menubar=no,"  +
	         "status=no,"   +
	         "location=no," +
	         "toolbar=no";
 
	window.open(sUrl, oWindow, sStyle);
}

/*==================================================
Function      : openModal
Parameter     : sUrl       (URL)
                oWindow    (Modal Name)
                iWidth     (가로 크기 : 숫자)
                iHeight    (세로 크기 : 숫자)
                iLeft      (가로 위치 : 숫자)
                iTop       (세로 위치 : 숫자)
Description   : Window 창 Open 함수
==================================================*/
function openModal(sUrl, oWindow, iWidth, iHeight)
{
	 var iMouseLeft = 500;
	 var iMouseTop  = 300;
	 var sStyle     = "";
	 var arrReturn;
	 
	 sStyle = "dialogWidth:"   + iWidth     + "px;" +
	          "dialogHeight:"  + iHeight    + "px;" +
	          "dialogleft:"    + iMouseLeft + ";" +
	          "dialogtop:"     + iMouseTop  + ";" +
	          "center:yes;"    +
	          "scroll:yes;"    +
	          "help:no;"       +
	          "resizable:no;";
 
    arrReturn = window.showModalDialog( sUrl
                                      , oWindow
                                      , sStyle  );
    
    return arrReturn;
}

/*==================================================
Function      : getInternetVersion
Parameter     : rv (브라우저명)
Return		  : browserVal (브라우저 버전)
Description   : 브라우저 버전 정보 확인
==================================================*/
function getInternetVersion(ver) { 
	 var rv = -1;     
	 var ua = navigator.userAgent;  
	 var re = null;
	 if(ver == "MSIE"){
	  	re = new RegExp("MSIE ([0-9]{1,}[\.0-9]{0,})");
	 }else{
	  	re = new RegExp(ver+"/([0-9]{1,}[\.0-9]{0,})");
	 }
	 if (re.exec(ua) != null){ 
	  	rv = parseFloat(RegExp.$1);
	 } 
	 return rv;  
} 

/**
 * 조회시 문자 공백 제거
 * @param vStr
 * @returns
 */
function fn_trim(vStr) {
    vStr = vStr.replace(/(^\s*)|(\s*$)/g, "");
    return vStr;
}

/**
 * n의 수많큼 앞의 문자 리턴
 * @param str
 * @param n
 * @returns
 */
function Left(str, n){
    if (n <= 0)
      return "";
    else if (n > String(str).length)
      return str;
    else
      return String(str).substring(0,n);
}

/*==================================================
Function      : browserCheck
Parameter     : 
Return		  : browserVal (브라우저 정보  - 예 : MSIE9)
Description   : 브라우저 정보 확인
==================================================*/
function browserCheck(){ 
	var ver = 0;
	var browserVal = ""; 
	if(navigator.appName.charAt(0) == "N"){ 
		 if(navigator.userAgent.indexOf("Chrome") != -1){
			  ver = getInternetVersion("Chrome");
			  browserVal = "Chrome"+ver;
		 }else if(navigator.userAgent.indexOf("Firefox") != -1){
			  ver = getInternetVersion("Firefox");
			  browserVal = "Firefox"+ver;
		 }else if(navigator.userAgent.indexOf("Safari") != -1){
			  ver = getInternetVersion("Safari");
			  browserVal = "Safari"+ver;
		 }
	}else if(navigator.appName.charAt(0) == "M"){
		 ver = getInternetVersion("MSIE");
		 browserVal = "MSIE"+ver;
	}
	return browserVal;
}

/*==================================================
Function      : containsChars
Parameter     : input, chars
Return		  : 입력값에 지정한 특정문자가 있으면 TRUE
Description   : 입력값에 특정 문자가 있는지 체크(특정 문자를 허용하지 않으려 할 때 사용)
Example		  :  
if( containsChars(form.field, "!,*&^%$#@~;\'\"<>") ) { 
      alert('입력값에 특수문자가 포함되었습니다.');
}  
==================================================*/
function containsChars(input, chars) {
    for (var inx = 0; inx < input.value.length; inx++) {
       if (chars.indexOf(input.value.charAt(inx)) != -1)
           return true;
    }
    return false;
}

/*==================================================
Function      : String.trim()
Parameter     : none
Return		  : trim()된 문자열
Description   : 내용의 좌 우측 공백을 제거해 주는 메소드
==================================================*/
String.prototype.trim = function()
{
	/**
	 * 빈공백(캐리지리턴, 탭등을 없애기 위한 trim정규식 패턴
	 */
	var TRIM_PATTERN = /(^\s*)|(\s*$)/g; // 내용의 값을 빈공백을 trim하기 위함(앞/뒤)
    return this.replace(TRIM_PATTERN, "");
};

/*==================================================
Function      : String.trimAll()
Parameter     : none
Return		  : trimAll()된 문자열
Description   : 내용의 모든 공백을 제거해 주는 메소드
==================================================*/
String.prototype.trimAll = function()
{
	/**
	 * 빈공백(캐리지리턴, 탭등을 없애기 위한 trim정규식 패턴
	 */
	var ALL_TRIM_PATTERN = /\s*/g; // 모든값의 공백을 제거.
	return this.replace(ALL_TRIM_PATTERN, "");
};


/**############# CHECKBOX 관련 함수 시작 ############## */

/**
 * 체크하기
 */
function fncCheckedCheckboxById(id){
    $('input:checkbox [ id="'+id+'"]').prop("checked", true);
}

/**
 * 체크된 값 가져오기 
 * 여러개 일 경우 , 로 구분해서 가져옴
 * @param name
 */
function fncGetCheckedValueByName(name){
    var val = "";
    $('input:checkbox[name="'+name+'"]').each(function(){
        if ( $(this).is(":checked") ) {
            if(val != ''){
                val += ',';
            }
            val += $(this).val();
        }
    });
    return val;
}

/**
 * 체크여부
 * @param name
 * @returns
 */
function fncIsCheckedByName(name){
   return $("input:checkbox[name="+name+"]").is(":checked");
}

/**
 * 모두 체크하기
 * @param name
 */
function fncCheckedAllByName(name){
    if(fncIsCheckedByName(name)){
        $("input[name="+name+"]:checkbox").prop("checked", false);
    }else{
        $("input[name="+name+"]:checkbox").prop("checked", true);
    }
}

/**############# CHECKBOX 관련 함수 끝 ############## */




/**
 * 파일 사이즈 단위표시
 */
function bytesToSize(bytes, type) {
	var s = ['Bytes', 'KB', 'MB', 'GB', 'TB', 'PB'];
	var e = Math.floor(Math.log(bytes) / Math.log(1024));
	
	var floorNum = (bytes / Math.pow(1024, e)).toFixed(2);
	
	if( !fncIsEmpty( type ) ){

		//소숫점 버림
		if( type == "FLOOR" ){
			return Math.floor(floorNum) + s[e];
		}
		
	} else {
		return (bytes / Math.pow(1024, e)).toFixed(2) + " " + s[e];
	}
	
};

/**
 * 2018.12.19 - 배지가 발급 될 시 발급된 배지 정보 모달 창 호출
 */
function fncGetBdgShowModal(issuStdrSn){
//	fncPost( '/bdg/web/searchGetEsofUserBdgInfo.do', {"issuStdrSn" : issuStdrSn}, function( data ){
//		if( !fncIsEmpty( data ) ){
//			var param = {};
//			if(data.result != "fail"){
//				if(data.result == "first"){
//					param = { 
//							"uploadFileUrl" : null
//							, "bdgNm" : null
//							, "bdgDc" : null
//							, "frstRegistPnttm" : null
//							, "flag" : "first"
//					};
//				}else{
//					param = { 
//							"uploadFileUrl" : data.result.uploadFileUrl
//							, "bdgNm" : data.result.bdgNm
//							, "bdgDc" : data.result.bdgDc
//							, "frstRegistPnttm" : data.result.frstRegistPnttm
//							, "flag" : null
//					};
//				}
//				fncInsertNotice();
//				fncShowCmmnModal( 'bdg', '', param );
//       		}
//		}
//	});
}

//배지 발급 시 알림 등록
function fncInsertNotice(){
	fncPost( '/mypage/notice/saveNoticeBdgIssue.do', {}, function( data ){
		if( !fncIsEmpty( data ) ){
			
		}
	});
}


//rgb 코드를 hex color 코드로 변환
function hexc(colorval) {
  var parts = colorval.match(/^rgb\((\d+),\s*(\d+),\s*(\d+)\)$/);
  delete(parts[0]);
  for (var i = 1; i <= 3; ++i) {
      parts[i] = parseInt(parts[i]).toString(16);
      if (parts[i].length == 1) parts[i] = '0' + parts[i];
  }
  color = '#' + parts.join('');
  return color;
}







function fn_getCookie(cookieName) {
    cookieName = cookieName + '=';
    var cookieData = document.cookie;
    var start = cookieData.indexOf(cookieName);
    var cookieValue = '';
    if(start != -1){
        start += cookieName.length;
        var end = cookieData.indexOf(';', start);
        if(end == -1)end = cookieData.length;
        cookieValue = cookieData.substring(start, end);
    }
    return unescape(cookieValue);
}








/**
 * Date Format
 */
Date.prototype.dtFormat = function(f) {
    if (!this.valueOf()) return " ";

    var weekName = ["일요일", "월요일", "화요일", "수요일", "목요일", "금요일", "토요일"];
    var d = this;
    
    return f.replace(/(yyyy|yy|MM|dd|E|hh|mm|SSS|ss|a\/p)/gi, function($1) {
        switch ($1) {
            case "yyyy": return d.getFullYear();
            case "yy": return (d.getFullYear() % 1000).zf(2);
            case "MM": return (d.getMonth() + 1).zf(2);
            case "dd": return d.getDate().zf(2);
            case "E": return weekName[d.getDay()];
            case "HH": return d.getHours().zf(2);
            case "hh": return ((h = d.getHours() % 12) ? h : 12).zf(2);
            case "mm": return d.getMinutes().zf(2);
            case "SSS": return d.getMilliseconds().zf(3);
            case "ss": return d.getSeconds().zf(2);
            case "a/p": return d.getHours() < 12 ? "오전" : "오후";
            default: return $1;
        }
    });
};

String.prototype.string = function(len){var s = '', i = 0; while (i++ < len) { s += this; } return s;};
String.prototype.zf = function(len){return "0".string(len - this.length) + this;};
Number.prototype.zf = function(len){return this.toString().zf(len);};



